{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nClassWatch is a classroom monitoring and attendance tracking system that uses face detection and behavior analysis to automatically monitor student attendance and behavior during class sessions. The application provides real-time camera feeds with face detection capabilities, automated attendance tracking, and behavior warning systems to help teachers manage their classrooms effectively.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe frontend is built using React with TypeScript, utilizing Vite as the build tool and development server. The application follows a component-based architecture with the following key characteristics:\n\n- **UI Framework**: Built with shadcn/ui components based on Radix UI primitives for consistent, accessible user interfaces\n- **Styling**: Tailwind CSS with custom CSS variables for theming and responsive design\n- **State Management**: React Query (TanStack Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation for type-safe form validation\n\n## Backend Architecture\nThe backend follows a REST API architecture using Express.js with TypeScript:\n\n- **Server Framework**: Express.js with middleware for JSON parsing, CORS, and request logging\n- **API Design**: RESTful endpoints organized by resource (students, classes, attendance, warnings)\n- **Data Validation**: Zod schemas for runtime type checking and validation\n- **Development**: Hot reloading with Vite middleware integration for seamless development experience\n\n## Data Storage Solutions\nThe application uses a hybrid storage approach:\n\n- **Database**: PostgreSQL with Drizzle ORM for schema management and query building\n- **Development Storage**: In-memory storage implementation for rapid prototyping and testing\n- **Schema Management**: Drizzle Kit for database migrations and schema synchronization\n- **Connection**: Neon Database serverless PostgreSQL for production deployment\n\n## Core Features Architecture\n\n### Face Detection and Camera Management\n- **Camera Service**: Custom CameraManager class for handling media device access and video stream management\n- **Detection Service**: FaceDetectionService for processing video frames and identifying faces/behaviors\n- **Real-time Processing**: Interval-based detection with configurable frequency for performance optimization\n\n### Attendance Tracking System\n- **Automated Recording**: Face detection results automatically create and update attendance records\n- **Status Management**: Multi-state attendance tracking (present, absent, late) with time-based calculations\n- **Threshold Configuration**: Configurable attendance thresholds per class for customized monitoring\n\n### Behavior Monitoring\n- **Multi-behavior Detection**: Support for mobile device usage, talking, and presence detection\n- **Warning System**: Real-time behavior warnings with dismissal capabilities\n- **Configurable Detection**: Per-class configuration for enabling/disabling specific behavior monitoring\n\n### Class Management\n- **Session Control**: Start/stop class monitoring with automatic state management\n- **Configuration**: Per-class settings for duration, thresholds, and detection preferences\n- **Real-time Status**: Live class status tracking with attendance statistics\n\n## External Dependencies\n\n### UI and Styling\n- **shadcn/ui**: Component library built on Radix UI primitives for accessible, customizable components\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Radix UI**: Headless UI components for complex interactive elements\n- **Lucide React**: Icon library for consistent iconography\n\n### Data Management\n- **Drizzle ORM**: Type-safe ORM for PostgreSQL with automatic schema inference\n- **Neon Database**: Serverless PostgreSQL database for production deployment\n- **TanStack Query**: Server state management with caching, background updates, and optimistic updates\n- **Zod**: Runtime type validation and schema definition\n\n### Development Tools\n- **Vite**: Fast build tool and development server with hot module replacement\n- **TypeScript**: Static type checking for improved developer experience and code reliability\n- **React Hook Form**: Performant form library with minimal re-renders\n- **date-fns**: Date manipulation utilities for attendance time calculations\n\n### Browser APIs\n- **MediaDevices API**: Camera access for video streaming and face detection\n- **WebRTC**: Real-time video processing capabilities\n- **Canvas API**: Image processing for face detection algorithms\n\nThe architecture emphasizes modularity, type safety, and real-time capabilities while maintaining a clean separation between presentation, business logic, and data layers. The system is designed to be scalable and maintainable with clear interfaces between components.","size_bytes":4928},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        warning: {\n          DEFAULT: \"var(--warning)\",\n          foreground: \"var(--warning-foreground)\",\n        },\n        danger: {\n          DEFAULT: \"var(--danger)\",\n          foreground: \"var(--danger-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3117},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertStudentSchema, \n  insertClassSchema, \n  insertAttendanceRecordSchema,\n  insertBehaviorWarningSchema,\n  insertFaceDetectionSchema,\n  insertTeacherSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Students routes\n  app.get(\"/api/students\", async (req, res) => {\n    try {\n      const students = await storage.getStudents();\n      res.json(students);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch students\" });\n    }\n  });\n\n  app.get(\"/api/students/:id\", async (req, res) => {\n    try {\n      const student = await storage.getStudent(req.params.id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n      res.json(student);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch student\" });\n    }\n  });\n\n  app.post(\"/api/students\", async (req, res) => {\n    try {\n      const studentData = insertStudentSchema.parse(req.body);\n      const student = await storage.createStudent(studentData);\n      res.status(201).json(student);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Invalid student data\" });\n    }\n  });\n\n  app.put(\"/api/students/:id\", async (req, res) => {\n    try {\n      const updates = insertStudentSchema.partial().parse(req.body);\n      const student = await storage.updateStudent(req.params.id, updates);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n      res.json(student);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Invalid update data\" });\n    }\n  });\n\n  app.delete(\"/api/students/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteStudent(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete student\" });\n    }\n  });\n\n  // Classes routes\n  app.get(\"/api/classes\", async (req, res) => {\n    try {\n      const classes = await storage.getClasses();\n      res.json(classes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch classes\" });\n    }\n  });\n\n  app.get(\"/api/classes/current\", async (req, res) => {\n    try {\n      const currentClass = await storage.getCurrentClass();\n      res.json(currentClass);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch current class\" });\n    }\n  });\n\n  app.post(\"/api/classes\", async (req, res) => {\n    try {\n      const classData = insertClassSchema.parse(req.body);\n      const newClass = await storage.createClass(classData);\n      res.status(201).json(newClass);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Invalid class data\" });\n    }\n  });\n\n  app.put(\"/api/classes/:id\", async (req, res) => {\n    try {\n      const updates = insertClassSchema.partial().parse(req.body);\n      const updatedClass = await storage.updateClass(req.params.id, updates);\n      if (!updatedClass) {\n        return res.status(404).json({ message: \"Class not found\" });\n      }\n      res.json(updatedClass);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Invalid update data\" });\n    }\n  });\n\n  app.post(\"/api/classes/:id/start\", async (req, res) => {\n    try {\n      const startedClass = await storage.startClass(req.params.id);\n      if (!startedClass) {\n        return res.status(404).json({ message: \"Class not found\" });\n      }\n      res.json(startedClass);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to start class\" });\n    }\n  });\n\n  app.post(\"/api/classes/:id/end\", async (req, res) => {\n    try {\n      const endedClass = await storage.endClass(req.params.id);\n      if (!endedClass) {\n        return res.status(404).json({ message: \"Class not found\" });\n      }\n      res.json(endedClass);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to end class\" });\n    }\n  });\n\n  // Attendance routes\n  app.get(\"/api/attendance\", async (req, res) => {\n    try {\n      const classId = req.query.classId as string;\n      const records = await storage.getAttendanceRecords(classId);\n      res.json(records);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch attendance records\" });\n    }\n  });\n\n  app.post(\"/api/attendance\", async (req, res) => {\n    try {\n      const recordData = insertAttendanceRecordSchema.parse(req.body);\n      const record = await storage.createAttendanceRecord(recordData);\n      res.status(201).json(record);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Invalid attendance data\" });\n    }\n  });\n\n  app.put(\"/api/attendance/:id\", async (req, res) => {\n    try {\n      const updates = insertAttendanceRecordSchema.partial().parse(req.body);\n      const record = await storage.updateAttendanceRecord(req.params.id, updates);\n      if (!record) {\n        return res.status(404).json({ message: \"Attendance record not found\" });\n      }\n      res.json(record);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Invalid update data\" });\n    }\n  });\n\n  // Behavior warnings routes\n  app.get(\"/api/warnings\", async (req, res) => {\n    try {\n      const classId = req.query.classId as string;\n      const isActive = req.query.isActive === \"true\";\n      const warnings = await storage.getBehaviorWarnings(classId, isActive);\n      res.json(warnings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch warnings\" });\n    }\n  });\n\n  app.post(\"/api/warnings\", async (req, res) => {\n    try {\n      const warningData = insertBehaviorWarningSchema.parse(req.body);\n      const warning = await storage.createBehaviorWarning(warningData);\n      res.status(201).json(warning);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Invalid warning data\" });\n    }\n  });\n\n  app.put(\"/api/warnings/:id/dismiss\", async (req, res) => {\n    try {\n      const dismissed = await storage.dismissBehaviorWarning(req.params.id);\n      if (!dismissed) {\n        return res.status(404).json({ message: \"Warning not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to dismiss warning\" });\n    }\n  });\n\n  // Face detection routes\n  app.post(\"/api/face-detections\", async (req, res) => {\n    try {\n      const detectionData = insertFaceDetectionSchema.parse(req.body);\n      const detection = await storage.createFaceDetection(detectionData);\n      res.status(201).json(detection);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Invalid detection data\" });\n    }\n  });\n\n  app.get(\"/api/face-detections/recent\", async (req, res) => {\n    try {\n      const classId = req.query.classId as string;\n      const minutes = parseInt(req.query.minutes as string) || 5;\n      if (!classId) {\n        return res.status(400).json({ message: \"classId is required\" });\n      }\n      const detections = await storage.getRecentFaceDetections(classId, minutes);\n      res.json(detections);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch recent detections\" });\n    }\n  });\n\n  // Teachers routes\n  app.get(\"/api/teachers\", async (req, res) => {\n    try {\n      const teachers = await storage.getTeachers();\n      res.json(teachers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch teachers\" });\n    }\n  });\n\n  app.get(\"/api/teachers/:id\", async (req, res) => {\n    try {\n      const teacher = await storage.getTeacher(req.params.id);\n      if (!teacher) {\n        return res.status(404).json({ message: \"Teacher not found\" });\n      }\n      res.json(teacher);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch teacher\" });\n    }\n  });\n\n  app.post(\"/api/teachers\", async (req, res) => {\n    try {\n      const teacherData = insertTeacherSchema.parse(req.body);\n      const teacher = await storage.createTeacher(teacherData);\n      res.status(201).json(teacher);\n    } catch (error: any) {\n      res.status(400).json({ message: error.errors?.[0]?.message || \"Invalid teacher data\" });\n    }\n  });\n\n  app.put(\"/api/teachers/:id\", async (req, res) => {\n    try {\n      const teacherData = insertTeacherSchema.parse(req.body);\n      const teacher = await storage.updateTeacher(req.params.id, teacherData);\n      if (!teacher) {\n        return res.status(404).json({ message: \"Teacher not found\" });\n      }\n      res.json(teacher);\n    } catch (error: any) {\n      res.status(400).json({ message: error.errors?.[0]?.message || \"Invalid teacher data\" });\n    }\n  });\n\n  app.delete(\"/api/teachers/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteTeacher(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Teacher not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete teacher\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9355},"server/storage.ts":{"content":"import { \n  type Student, \n  type InsertStudent,\n  type Class,\n  type InsertClass,\n  type AttendanceRecord,\n  type InsertAttendanceRecord,\n  type BehaviorWarning,\n  type InsertBehaviorWarning,\n  type FaceDetection,\n  type InsertFaceDetection,\n  type Teacher,\n  type InsertTeacher\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Students\n  getStudents(): Promise<Student[]>;\n  getStudent(id: string): Promise<Student | undefined>;\n  getStudentByStudentId(studentId: string): Promise<Student | undefined>;\n  createStudent(student: InsertStudent): Promise<Student>;\n  updateStudent(id: string, updates: Partial<Student>): Promise<Student | undefined>;\n  deleteStudent(id: string): Promise<boolean>;\n\n  // Classes\n  getClasses(): Promise<Class[]>;\n  getClass(id: string): Promise<Class | undefined>;\n  getCurrentClass(): Promise<Class | undefined>;\n  createClass(classData: InsertClass): Promise<Class>;\n  updateClass(id: string, updates: Partial<Class>): Promise<Class | undefined>;\n  startClass(id: string): Promise<Class | undefined>;\n  endClass(id: string): Promise<Class | undefined>;\n\n  // Attendance\n  getAttendanceRecords(classId?: string): Promise<AttendanceRecord[]>;\n  getAttendanceRecord(studentId: string, classId: string): Promise<AttendanceRecord | undefined>;\n  createAttendanceRecord(record: InsertAttendanceRecord): Promise<AttendanceRecord>;\n  updateAttendanceRecord(id: string, updates: Partial<AttendanceRecord>): Promise<AttendanceRecord | undefined>;\n\n  // Behavior Warnings\n  getBehaviorWarnings(classId?: string, isActive?: boolean): Promise<BehaviorWarning[]>;\n  createBehaviorWarning(warning: InsertBehaviorWarning): Promise<BehaviorWarning>;\n  dismissBehaviorWarning(id: string): Promise<boolean>;\n\n  // Face Detections\n  createFaceDetection(detection: InsertFaceDetection): Promise<FaceDetection>;\n  getRecentFaceDetections(classId: string, minutes?: number): Promise<FaceDetection[]>;\n\n  // Teachers\n  getTeachers(): Promise<Teacher[]>;\n  getTeacher(id: string): Promise<Teacher | undefined>;\n  createTeacher(teacher: InsertTeacher): Promise<Teacher>;\n  updateTeacher(id: string, updates: Partial<Teacher>): Promise<Teacher | undefined>;\n  deleteTeacher(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private students: Map<string, Student> = new Map();\n  private classes: Map<string, Class> = new Map();\n  private attendanceRecords: Map<string, AttendanceRecord> = new Map();\n  private behaviorWarnings: Map<string, BehaviorWarning> = new Map();\n  private faceDetections: Map<string, FaceDetection> = new Map();\n  private teachers: Map<string, Teacher> = new Map();\n\n  constructor() {\n    // Start with empty storage - no demo data\n  }\n\n  // Students\n  async getStudents(): Promise<Student[]> {\n    return Array.from(this.students.values());\n  }\n\n  async getStudent(id: string): Promise<Student | undefined> {\n    return this.students.get(id);\n  }\n\n  async getStudentByStudentId(studentId: string): Promise<Student | undefined> {\n    return Array.from(this.students.values()).find(s => s.studentId === studentId);\n  }\n\n  async createStudent(insertStudent: InsertStudent): Promise<Student> {\n    const id = randomUUID();\n    const student: Student = {\n      ...insertStudent,\n      id,\n      createdAt: new Date()\n    };\n    this.students.set(id, student);\n    return student;\n  }\n\n  async updateStudent(id: string, updates: Partial<Student>): Promise<Student | undefined> {\n    const existing = this.students.get(id);\n    if (!existing) return undefined;\n\n    const updated = { ...existing, ...updates };\n    this.students.set(id, updated);\n    return updated;\n  }\n\n  async deleteStudent(id: string): Promise<boolean> {\n    return this.students.delete(id);\n  }\n\n  // Classes\n  async getClasses(): Promise<Class[]> {\n    return Array.from(this.classes.values());\n  }\n\n  async getClass(id: string): Promise<Class | undefined> {\n    return this.classes.get(id);\n  }\n\n  async getCurrentClass(): Promise<Class | undefined> {\n    return Array.from(this.classes.values()).find(c => c.isActive);\n  }\n\n  async createClass(insertClass: InsertClass): Promise<Class> {\n    const id = randomUUID();\n    const classData: Class = {\n      ...insertClass,\n      id,\n      createdAt: new Date()\n    };\n    this.classes.set(id, classData);\n    return classData;\n  }\n\n  async updateClass(id: string, updates: Partial<Class>): Promise<Class | undefined> {\n    const existing = this.classes.get(id);\n    if (!existing) return undefined;\n\n    const updated = { ...existing, ...updates };\n    this.classes.set(id, updated);\n    return updated;\n  }\n\n  async startClass(id: string): Promise<Class | undefined> {\n    const existing = this.classes.get(id);\n    if (!existing) return undefined;\n\n    // End any other active classes\n    for (const [cId, c] of this.classes) {\n      if (c.isActive && cId !== id) {\n        this.classes.set(cId, { ...c, isActive: false, endedAt: new Date() });\n      }\n    }\n\n    const updated = { \n      ...existing, \n      isActive: true, \n      startedAt: new Date(),\n      endedAt: null \n    };\n    this.classes.set(id, updated);\n    return updated;\n  }\n\n  async endClass(id: string): Promise<Class | undefined> {\n    const existing = this.classes.get(id);\n    if (!existing) return undefined;\n\n    const updated = { \n      ...existing, \n      isActive: false, \n      endedAt: new Date() \n    };\n    this.classes.set(id, updated);\n    return updated;\n  }\n\n  // Attendance\n  async getAttendanceRecords(classId?: string): Promise<AttendanceRecord[]> {\n    const records = Array.from(this.attendanceRecords.values());\n    return classId ? records.filter(r => r.classId === classId) : records;\n  }\n\n  async getAttendanceRecord(studentId: string, classId: string): Promise<AttendanceRecord | undefined> {\n    return Array.from(this.attendanceRecords.values())\n      .find(r => r.studentId === studentId && r.classId === classId);\n  }\n\n  async createAttendanceRecord(insertRecord: InsertAttendanceRecord): Promise<AttendanceRecord> {\n    const id = randomUUID();\n    const record: AttendanceRecord = {\n      ...insertRecord,\n      id,\n      createdAt: new Date()\n    };\n    this.attendanceRecords.set(id, record);\n    return record;\n  }\n\n  async updateAttendanceRecord(id: string, updates: Partial<AttendanceRecord>): Promise<AttendanceRecord | undefined> {\n    const existing = this.attendanceRecords.get(id);\n    if (!existing) return undefined;\n\n    const updated = { ...existing, ...updates };\n    this.attendanceRecords.set(id, updated);\n    return updated;\n  }\n\n  // Behavior Warnings\n  async getBehaviorWarnings(classId?: string, isActive?: boolean): Promise<BehaviorWarning[]> {\n    let warnings = Array.from(this.behaviorWarnings.values());\n    if (classId) warnings = warnings.filter(w => w.classId === classId);\n    if (isActive !== undefined) warnings = warnings.filter(w => w.isActive === isActive);\n    return warnings;\n  }\n\n  async createBehaviorWarning(insertWarning: InsertBehaviorWarning): Promise<BehaviorWarning> {\n    const id = randomUUID();\n    const warning: BehaviorWarning = {\n      ...insertWarning,\n      id,\n      createdAt: new Date()\n    };\n    this.behaviorWarnings.set(id, warning);\n    return warning;\n  }\n\n  async dismissBehaviorWarning(id: string): Promise<boolean> {\n    const warning = this.behaviorWarnings.get(id);\n    if (!warning) return false;\n\n    this.behaviorWarnings.set(id, { ...warning, isActive: false });\n    return true;\n  }\n\n  // Face Detections\n  async createFaceDetection(insertDetection: InsertFaceDetection): Promise<FaceDetection> {\n    const id = randomUUID();\n    const detection: FaceDetection = {\n      ...insertDetection,\n      id,\n      timestamp: new Date()\n    };\n    this.faceDetections.set(id, detection);\n    return detection;\n  }\n\n  async getRecentFaceDetections(classId: string, minutes: number = 5): Promise<FaceDetection[]> {\n    const cutoff = new Date(Date.now() - minutes * 60 * 1000);\n    return Array.from(this.faceDetections.values())\n      .filter(d => d.classId === classId && d.timestamp && d.timestamp > cutoff);\n  }\n\n  // Teachers\n  async getTeachers(): Promise<Teacher[]> {\n    return Array.from(this.teachers.values());\n  }\n\n  async getTeacher(id: string): Promise<Teacher | undefined> {\n    return this.teachers.get(id);\n  }\n\n  async createTeacher(insertTeacher: InsertTeacher): Promise<Teacher> {\n    const id = randomUUID();\n    const teacher: Teacher = {\n      ...insertTeacher,\n      id,\n      createdAt: new Date()\n    };\n    this.teachers.set(id, teacher);\n    return teacher;\n  }\n\n  async updateTeacher(id: string, updates: Partial<Teacher>): Promise<Teacher | undefined> {\n    const existing = this.teachers.get(id);\n    if (!existing) return undefined;\n\n    const updated = { ...existing, ...updates };\n    this.teachers.set(id, updated);\n    return updated;\n  }\n\n  async deleteTeacher(id: string): Promise<boolean> {\n    return this.teachers.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":9008},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const students = pgTable(\"students\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  studentId: text(\"student_id\").notNull().unique(),\n  email: text(\"email\"),\n  photoUrl: text(\"photo_url\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const classes = pgTable(\"classes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  duration: integer(\"duration\").notNull(), // in minutes\n  attendanceThreshold: integer(\"attendance_threshold\").default(75), // percentage\n  mobileDetectionEnabled: boolean(\"mobile_detection_enabled\").default(true),\n  talkingDetectionEnabled: boolean(\"talking_detection_enabled\").default(false),\n  isActive: boolean(\"is_active\").default(false),\n  startedAt: timestamp(\"started_at\"),\n  endedAt: timestamp(\"ended_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const attendanceRecords = pgTable(\"attendance_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  classId: varchar(\"class_id\").references(() => classes.id).notNull(),\n  status: text(\"status\").notNull(), // 'present', 'absent', 'late'\n  timePresent: integer(\"time_present\").default(0), // in minutes\n  detectionCount: integer(\"detection_count\").default(0),\n  lastSeen: timestamp(\"last_seen\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const behaviorWarnings = pgTable(\"behavior_warnings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  classId: varchar(\"class_id\").references(() => classes.id).notNull(),\n  warningType: text(\"warning_type\").notNull(), // 'mobile', 'talking', 'not_detected'\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const faceDetections = pgTable(\"face_detections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id),\n  classId: varchar(\"class_id\").references(() => classes.id).notNull(),\n  confidence: integer(\"confidence\"), // 0-100\n  boundingBox: text(\"bounding_box\"), // JSON string with x,y,width,height\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const insertStudentSchema = createInsertSchema(students).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertClassSchema = createInsertSchema(classes).omit({\n  id: true,\n  createdAt: true,\n  startedAt: true,\n  endedAt: true,\n});\n\nexport const insertAttendanceRecordSchema = createInsertSchema(attendanceRecords).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBehaviorWarningSchema = createInsertSchema(behaviorWarnings).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFaceDetectionSchema = createInsertSchema(faceDetections).omit({\n  id: true,\n  timestamp: true,\n});\n\n// Teachers table\nexport const teachers = pgTable('teachers', {\n  id: text('id').primaryKey(),\n  name: text('name').notNull(),\n  email: text('email').notNull().unique(),\n  photoUrl: text('photo_url'),\n  isActive: boolean('is_active').default(true).notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\nexport const insertTeacherSchema = createInsertSchema(teachers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type Student = typeof students.$inferSelect;\nexport type InsertStudent = z.infer<typeof insertStudentSchema>;\nexport type Class = typeof classes.$inferSelect;\nexport type InsertClass = z.infer<typeof insertClassSchema>;\nexport type AttendanceRecord = typeof attendanceRecords.$inferSelect;\nexport type InsertAttendanceRecord = z.infer<typeof insertAttendanceRecordSchema>;\nexport type BehaviorWarning = typeof behaviorWarnings.$inferSelect;\nexport type InsertBehaviorWarning = z.infer<typeof insertBehaviorWarningSchema>;\nexport type FaceDetection = typeof faceDetections.$inferSelect;\nexport type InsertFaceDetection = z.infer<typeof insertFaceDetectionSchema>;\nexport type Teacher = typeof teachers.$inferSelect;\nexport type InsertTeacher = z.infer<typeof insertTeacherSchema>;\n","size_bytes":4503},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Students from \"@/pages/students\";\nimport Attendance from \"@/pages/attendance\";\nimport TeacherProfile from \"@/pages/teacher-profile\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/students\" component={Students} />\n      <Route path=\"/attendance\" component={Attendance} />\n      <Route path=\"/teacher-profile\" component={TeacherProfile} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1033},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(213.3333 87.5% 50.9804%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210.6667 28.5714% 59.0196%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --success: hsl(160.4706 84.0000% 39.2157%);\n  --success-foreground: hsl(0 0% 100%);\n  --warning: hsl(37.6923 91.3043% 48.2353%);\n  --warning-foreground: hsl(0 0% 100%);\n  --danger: hsl(0 84.2105% 60.1961%);\n  --danger-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', 'Open Sans', sans-serif;\n  }\n}\n\n@layer utilities {\n  .bg-success {\n    background-color: var(--success);\n  }\n  .text-success {\n    color: var(--success);\n  }\n  .bg-warning {\n    background-color: var(--warning);\n  }\n  .text-warning {\n    color: var(--warning);\n  }\n  .bg-danger {\n    background-color: var(--danger);\n  }\n  .text-danger {\n    color: var(--danger);\n  }\n  .border-success {\n    border-color: var(--success);\n  }\n  .border-warning {\n    border-color: var(--warning);\n  }\n  .border-danger {\n    border-color: var(--danger);\n  }\n}\n\n.face-detection-box {\n  position: absolute;\n  border: 2px solid var(--success);\n  border-radius: 4px;\n  background: rgba(16, 185, 129, 0.1);\n}\n\n.behavior-warning-box {\n  position: absolute;\n  border: 2px solid var(--warning);\n  border-radius: 4px;\n  background: rgba(245, 158, 11, 0.1);\n}\n\n.camera-feed {\n  background: #000;\n  position: relative;\n  border-radius: 8px;\n  overflow: hidden;\n}\n","size_bytes":6389},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/app-header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Bell } from \"lucide-react\";\n\nexport function AppHeader() {\n  const [location] = useLocation();\n\n  const navigation = [\n    { name: \"Dashboard\", href: \"/\" },\n    { name: \"Students\", href: \"/students\" },\n    { name: \"Attendance\", href: \"/attendance\" },\n    { name: \"Teacher Profile\", href: \"/teacher-profile\" },\n  ];\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-slate-200\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <h1 className=\"text-xl font-bold text-primary\">ClassWatch</h1>\n            </div>\n            <nav className=\"hidden md:ml-10 md:flex space-x-8\">\n              {navigation.map((item) => (\n                <Link\n                  key={item.name}\n                  href={item.href}\n                  className={`${\n                    location === item.href\n                      ? \"text-primary border-b-2 border-primary\"\n                      : \"text-slate-500 hover:text-slate-700\"\n                  } pb-4 text-sm font-medium`}\n                  data-testid={`nav-${item.name.toLowerCase()}`}\n                >\n                  {item.name}\n                </Link>\n              ))}\n            </nav>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <button \n              className=\"text-slate-400 hover:text-slate-500\"\n              data-testid=\"button-notifications\"\n            >\n              <Bell className=\"h-5 w-5\" />\n            </button>\n            <div className=\"flex items-center space-x-2\">\n              <img \n                className=\"h-8 w-8 rounded-full\" \n                src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=32&h=32\" \n                alt=\"Teacher profile\"\n                data-testid=\"img-profile\"\n              />\n              <span className=\"text-sm font-medium\" data-testid=\"text-teacher-name\">Dr. Smith</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2260},"client/src/components/attendance-table.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Filter } from \"lucide-react\";\nimport type { Student, AttendanceRecord } from \"@shared/schema\";\n\ninterface AttendanceTableProps {\n  classId?: string;\n  className?: string;\n}\n\nexport function AttendanceTable({ classId, className = \"CS-101\" }: AttendanceTableProps) {\n  // Fetch students\n  const { data: students = [], isLoading: studentsLoading } = useQuery<Student[]>({\n    queryKey: ['/api/students']\n  });\n\n  // Fetch attendance records for current class\n  const { data: attendanceRecords = [], isLoading: attendanceLoading } = useQuery<AttendanceRecord[]>({\n    queryKey: ['/api/attendance'],\n    queryParams: classId ? { classId } : undefined\n  });\n\n  const isLoading = studentsLoading || attendanceLoading;\n\n  const getStudentAttendance = (studentId: string) => {\n    return attendanceRecords.find(record => record.studentId === studentId);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'present':\n        return <Badge className=\"bg-success/10 text-success hover:bg-success/20\">Present</Badge>;\n      case 'late':\n        return <Badge className=\"bg-warning/10 text-warning hover:bg-warning/20\">Late</Badge>;\n      case 'absent':\n        return <Badge className=\"bg-danger/10 text-danger hover:bg-danger/20\">Absent</Badge>;\n      default:\n        return <Badge variant=\"secondary\">Unknown</Badge>;\n    }\n  };\n\n  const getWarningBadge = (timePresent: number, hasWarnings: boolean) => {\n    if (hasWarnings) {\n      return <Badge className=\"bg-warning/10 text-warning hover:bg-warning/20\">Mobile</Badge>;\n    }\n    if (timePresent < 30) {\n      return <Badge className=\"bg-danger/10 text-danger hover:bg-danger/20\">Not Detected</Badge>;\n    }\n    return <span className=\"text-sm text-slate-500\">None</span>;\n  };\n\n  const formatTimePresent = (minutes: number) => {\n    if (minutes >= 60) {\n      const hours = Math.floor(minutes / 60);\n      const remainingMinutes = minutes % 60;\n      return `${hours}h ${remainingMinutes}m`;\n    }\n    return `${minutes} mins`;\n  };\n\n  const formatLastSeen = (lastSeen?: Date | null) => {\n    if (!lastSeen) return 'Never';\n    \n    const now = new Date();\n    const diffMinutes = Math.floor((now.getTime() - lastSeen.getTime()) / (1000 * 60));\n    \n    if (diffMinutes === 0) return 'Now';\n    if (diffMinutes === 1) return '1 min ago';\n    if (diffMinutes < 60) return `${diffMinutes} mins ago`;\n    \n    const diffHours = Math.floor(diffMinutes / 60);\n    return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-4 bg-slate-200 rounded w-1/4\"></div>\n            <div className=\"space-y-2\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"h-12 bg-slate-100 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <div className=\"px-6 py-4 border-b border-slate-200\">\n        <div className=\"flex justify-between items-center\">\n          <h3 className=\"text-lg font-semibold text-slate-800\">Student Attendance</h3>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-slate-600\" data-testid=\"text-class-name\">Class: {className}</span>\n              <span className=\"text-sm text-slate-400\">|</span>\n              <span className=\"text-sm text-slate-600\" data-testid=\"text-student-count\">\n                {students.length} Students\n              </span>\n            </div>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              data-testid=\"button-filter\"\n            >\n              <Filter className=\"mr-2 h-4 w-4\" />\n              Filter\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-slate-200\">\n          <thead className=\"bg-slate-50\">\n            <tr>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                Student\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                Status\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                Time Present\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                Warnings\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                Last Seen\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                Actions\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-slate-200\">\n            {students.map((student) => {\n              const attendance = getStudentAttendance(student.id);\n              const timePresent = attendance?.timePresent || 0;\n              const status = attendance?.status || 'absent';\n              const hasWarnings = status === 'present' && Math.random() > 0.7; // Mock warning logic\n              \n              return (\n                <tr key={student.id} data-testid={`student-row-${student.studentId}`}>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <img \n                        className=\"h-10 w-10 rounded-full\" \n                        src={student.photoUrl || `https://ui-avatars.com/api/?name=${encodeURIComponent(student.name)}&background=random`}\n                        alt={`${student.name} photo`}\n                        data-testid={`img-student-${student.studentId}`}\n                      />\n                      <div className=\"ml-4\">\n                        <div className=\"text-sm font-medium text-slate-900\" data-testid={`text-student-name-${student.studentId}`}>\n                          {student.name}\n                        </div>\n                        <div className=\"text-sm text-slate-500\" data-testid={`text-student-id-${student.studentId}`}>\n                          ID: {student.studentId}\n                        </div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\" data-testid={`status-${student.studentId}`}>\n                    {getStatusBadge(status)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-slate-900\" data-testid={`time-present-${student.studentId}`}>\n                    {formatTimePresent(timePresent)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\" data-testid={`warnings-${student.studentId}`}>\n                    {getWarningBadge(timePresent, hasWarnings)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-slate-500\" data-testid={`last-seen-${student.studentId}`}>\n                    {formatLastSeen(attendance?.lastSeen)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      data-testid={`button-edit-${student.studentId}`}\n                    >\n                      Edit\n                    </Button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":8122},"client/src/components/camera-feed.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { CameraManager } from \"@/lib/camera\";\nimport { FaceDetectionService, DetectedFace, BehaviorDetection } from \"@/lib/face-detection\";\nimport { FaceDetectionOverlay } from \"./face-detection\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Eye, Video, Camera, Settings, Expand } from \"lucide-react\";\n\ninterface CameraFeedProps {\n  isRecording: boolean;\n  onRecordingChange: (recording: boolean) => void;\n  onFacesDetected: (faces: DetectedFace[]) => void;\n  onBehaviorDetected: (behaviors: BehaviorDetection[]) => void;\n}\n\nexport function CameraFeed({ \n  isRecording, \n  onRecordingChange, \n  onFacesDetected,\n  onBehaviorDetected \n}: CameraFeedProps) {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const cameraManagerRef = useRef<CameraManager>(new CameraManager());\n  const faceDetectionRef = useRef<FaceDetectionService>(new FaceDetectionService());\n  \n  const [cameraStatus, setCameraStatus] = useState<'idle' | 'starting' | 'active' | 'error'>('idle');\n  const [detectedFaces, setDetectedFaces] = useState<DetectedFace[]>([]);\n  const [detectedBehaviors, setDetectedBehaviors] = useState<BehaviorDetection[]>([]);\n  const [faceDetectionActive, setFaceDetectionActive] = useState(false);\n\n  useEffect(() => {\n    const initializeServices = async () => {\n      const success = await faceDetectionRef.current.initialize();\n      if (!success) {\n        console.error('Failed to initialize face detection');\n      }\n    };\n\n    initializeServices();\n\n    return () => {\n      cameraManagerRef.current.stopCamera();\n      faceDetectionRef.current.stopDetection();\n    };\n  }, []);\n\n  const startCamera = async () => {\n    if (!videoRef.current) return;\n    \n    setCameraStatus('starting');\n    \n    const hasPermission = await cameraManagerRef.current.requestPermission();\n    if (!hasPermission) {\n      setCameraStatus('error');\n      return;\n    }\n\n    const success = await cameraManagerRef.current.startCamera(videoRef.current);\n    if (success) {\n      setCameraStatus('active');\n      startFaceDetection();\n    } else {\n      setCameraStatus('error');\n    }\n  };\n\n  const stopCamera = () => {\n    cameraManagerRef.current.stopCamera();\n    faceDetectionRef.current.stopDetection();\n    setCameraStatus('idle');\n    setFaceDetectionActive(false);\n    setDetectedFaces([]);\n    setDetectedBehaviors([]);\n  };\n\n  const startFaceDetection = async () => {\n    if (!videoRef.current) return;\n\n    // Reload student profiles for up-to-date face recognition\n    await faceDetectionRef.current.loadStudentProfiles();\n\n    setFaceDetectionActive(true);\n    faceDetectionRef.current.startDetection(\n      videoRef.current,\n      (faces) => {\n        setDetectedFaces(faces);\n        onFacesDetected(faces);\n      },\n      (behaviors) => {\n        setDetectedBehaviors(behaviors);\n        onBehaviorDetected(behaviors);\n      }\n    );\n  };\n\n  const handleStartClass = async () => {\n    if (cameraStatus === 'idle') {\n      await startCamera();\n    }\n    onRecordingChange(true);\n  };\n\n  const handleStopClass = () => {\n    onRecordingChange(false);\n    stopCamera();\n  };\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-lg font-semibold text-slate-800\">Live Camera Feed</h2>\n          <div className=\"flex items-center space-x-4\">\n            {isRecording && (\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-success rounded-full animate-pulse\"></div>\n                <span className=\"text-sm text-slate-600\" data-testid=\"text-recording-status\">Recording</span>\n              </div>\n            )}\n            <Button\n              onClick={isRecording ? handleStopClass : handleStartClass}\n              className={`${\n                isRecording \n                  ? 'bg-danger hover:bg-red-600' \n                  : 'bg-primary hover:bg-blue-700'\n              } text-white transition-colors`}\n              disabled={cameraStatus === 'starting'}\n              data-testid=\"button-start-class\"\n            >\n              <Video className=\"mr-2 h-4 w-4\" />\n              {isRecording ? 'Stop Class' : 'Start Class'}\n            </Button>\n          </div>\n        </div>\n        \n        {/* Camera Feed Display */}\n        <div className=\"camera-feed aspect-video bg-slate-900 rounded-lg relative\">\n          {cameraStatus === 'idle' && (\n            <div className=\"absolute inset-0 flex items-center justify-center text-white\">\n              <div className=\"text-center\">\n                <Video className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-lg mb-2\">Camera not started</p>\n                <p className=\"text-sm opacity-75\">Click \"Start Class\" to begin monitoring</p>\n              </div>\n            </div>\n          )}\n          \n          {cameraStatus === 'starting' && (\n            <div className=\"absolute inset-0 flex items-center justify-center text-white\">\n              <div className=\"text-center\">\n                <div className=\"animate-spin rounded-full h-16 w-16 border-b-2 border-white mx-auto mb-4\"></div>\n                <p className=\"text-lg\">Starting camera...</p>\n              </div>\n            </div>\n          )}\n          \n          {cameraStatus === 'error' && (\n            <div className=\"absolute inset-0 flex items-center justify-center text-white\">\n              <div className=\"text-center\">\n                <Video className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-lg mb-2\">Camera access denied</p>\n                <p className=\"text-sm opacity-75\">Please allow camera permissions and try again</p>\n              </div>\n            </div>\n          )}\n\n          <video\n            ref={videoRef}\n            className={`w-full h-full object-cover rounded-lg ${\n              cameraStatus === 'active' ? 'block' : 'hidden'\n            }`}\n            muted\n            playsInline\n            data-testid=\"video-camera-feed\"\n          />\n\n          {/* Face Detection Overlay */}\n          {cameraStatus === 'active' && faceDetectionActive && (\n            <FaceDetectionOverlay\n              faces={detectedFaces}\n              behaviors={detectedBehaviors}\n              containerWidth={1280}\n              containerHeight={720}\n            />\n          )}\n          \n          {/* Camera controls overlay */}\n          {cameraStatus === 'active' && (\n            <>\n              <div className=\"absolute bottom-4 left-4 flex space-x-2\">\n                <button \n                  className=\"bg-black/50 text-white p-2 rounded-md hover:bg-black/70 transition-colors\"\n                  data-testid=\"button-expand\"\n                >\n                  <Expand className=\"h-4 w-4\" />\n                </button>\n                <button \n                  className=\"bg-black/50 text-white p-2 rounded-md hover:bg-black/70 transition-colors\"\n                  data-testid=\"button-capture\"\n                >\n                  <Camera className=\"h-4 w-4\" />\n                </button>\n                <button \n                  className=\"bg-black/50 text-white p-2 rounded-md hover:bg-black/70 transition-colors\"\n                  data-testid=\"button-settings\"\n                >\n                  <Settings className=\"h-4 w-4\" />\n                </button>\n              </div>\n              \n              {/* Detection status */}\n              <div className=\"absolute top-4 right-4 bg-black/70 text-white px-3 py-2 rounded-md text-sm\">\n                <div className=\"flex items-center space-x-2\">\n                  <Eye className=\"h-4 w-4 text-success\" />\n                  <span data-testid=\"text-faces-detected\">{detectedFaces.length} Faces Detected</span>\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n        \n        {/* Detection Controls */}\n        <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"bg-slate-50 p-4 rounded-lg\">\n            <h3 className=\"font-medium text-slate-800 mb-2\">Face Detection</h3>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-slate-600\">Status</span>\n              <div className=\"flex items-center space-x-2\">\n                <div className={`w-2 h-2 rounded-full ${faceDetectionActive ? 'bg-success' : 'bg-slate-400'}`}></div>\n                <span className={`text-sm font-medium ${faceDetectionActive ? 'text-success' : 'text-slate-400'}`}>\n                  {faceDetectionActive ? 'Active' : 'Inactive'}\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-slate-50 p-4 rounded-lg\">\n            <h3 className=\"font-medium text-slate-800 mb-2\">Behavior Monitor</h3>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-slate-600\">Warnings</span>\n              <div className=\"flex items-center space-x-2\">\n                <div className={`w-2 h-2 rounded-full ${detectedBehaviors.length > 0 ? 'bg-warning' : 'bg-success'}`}></div>\n                <span className={`text-sm font-medium ${detectedBehaviors.length > 0 ? 'text-warning' : 'text-success'}`}>\n                  {detectedBehaviors.length} Alert{detectedBehaviors.length !== 1 ? 's' : ''}\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-slate-50 p-4 rounded-lg\">\n            <h3 className=\"font-medium text-slate-800 mb-2\">Attendance Rate</h3>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-slate-600\">Present</span>\n              <span className=\"text-sm text-success font-bold\" data-testid=\"text-attendance-rate\">\n                {detectedFaces.length > 0 ? '85%' : '0%'}\n              </span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10060},"client/src/components/class-controls.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Play, Download, UserPlus, X } from \"lucide-react\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport type { Class, BehaviorWarning } from \"@shared/schema\";\n\ninterface ClassControlsProps {\n  currentClass?: Class;\n  onStartMonitoring: () => void;\n  onClassUpdate: (classData: Partial<Class>) => void;\n}\n\nexport function ClassControls({ \n  currentClass, \n  onStartMonitoring, \n  onClassUpdate \n}: ClassControlsProps) {\n  const [duration, setDuration] = useState(currentClass?.duration || 90);\n  const [threshold, setThreshold] = useState(currentClass?.attendanceThreshold || 75);\n  const [mobileDetection, setMobileDetection] = useState(currentClass?.mobileDetectionEnabled ?? true);\n  const [talkingDetection, setTalkingDetection] = useState(currentClass?.talkingDetectionEnabled ?? false);\n\n  // Fetch active warnings\n  const { data: warnings = [] } = useQuery<BehaviorWarning[]>({\n    queryKey: ['/api/warnings'],\n    queryParams: { \n      classId: currentClass?.id,\n      isActive: 'true' \n    },\n    enabled: !!currentClass?.id\n  });\n\n  // Dismiss warning mutation\n  const dismissWarningMutation = useMutation({\n    mutationFn: async (warningId: string) => {\n      const response = await fetch(`/api/warnings/${warningId}/dismiss`, {\n        method: 'PUT',\n      });\n      if (!response.ok) throw new Error('Failed to dismiss warning');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/warnings'] });\n    }\n  });\n\n  const handleSettingChange = (field: string, value: any) => {\n    const updates = { [field]: value };\n    \n    switch (field) {\n      case 'duration':\n        setDuration(value);\n        break;\n      case 'attendanceThreshold':\n        setThreshold(value);\n        break;\n      case 'mobileDetectionEnabled':\n        setMobileDetection(value);\n        break;\n      case 'talkingDetectionEnabled':\n        setTalkingDetection(value);\n        break;\n    }\n\n    onClassUpdate(updates);\n  };\n\n  const handleDismissWarning = (warningId: string) => {\n    dismissWarningMutation.mutate(warningId);\n  };\n\n  const getWarningIcon = (type: string) => {\n    switch (type) {\n      case 'mobile':\n        return '📱';\n      case 'talking':\n        return '💬';\n      case 'not_detected':\n        return '👤';\n      default:\n        return '⚠️';\n    }\n  };\n\n  const getWarningMessage = (warning: BehaviorWarning) => {\n    switch (warning.warningType) {\n      case 'mobile':\n        return 'Mobile phone usage detected';\n      case 'talking':\n        return 'Excessive talking detected';\n      case 'not_detected':\n        return 'Not detected for extended period';\n      default:\n        return warning.description || 'Unknown warning';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Class Settings */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-slate-800 mb-4\">Class Settings</h3>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"duration\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Class Duration\n              </Label>\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  id=\"duration\"\n                  type=\"number\"\n                  value={duration}\n                  onChange={(e) => handleSettingChange('duration', parseInt(e.target.value) || 0)}\n                  className=\"w-20\"\n                  data-testid=\"input-duration\"\n                />\n                <span className=\"text-sm text-slate-600\">minutes</span>\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"threshold\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Attendance Threshold\n              </Label>\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  id=\"threshold\"\n                  type=\"number\"\n                  value={threshold}\n                  onChange={(e) => handleSettingChange('attendanceThreshold', parseInt(e.target.value) || 0)}\n                  className=\"w-20\"\n                  data-testid=\"input-threshold\"\n                />\n                <span className=\"text-sm text-slate-600\">% of class time</span>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"mobile-detection\" className=\"text-sm font-medium text-slate-700\">\n                Mobile Detection\n              </Label>\n              <Switch\n                id=\"mobile-detection\"\n                checked={mobileDetection}\n                onCheckedChange={(checked) => handleSettingChange('mobileDetectionEnabled', checked)}\n                data-testid=\"switch-mobile-detection\"\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"talking-detection\" className=\"text-sm font-medium text-slate-700\">\n                Talking Detection\n              </Label>\n              <Switch\n                id=\"talking-detection\"\n                checked={talkingDetection}\n                onCheckedChange={(checked) => handleSettingChange('talkingDetectionEnabled', checked)}\n                data-testid=\"switch-talking-detection\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-slate-800 mb-4\">Quick Actions</h3>\n          <div className=\"space-y-3\">\n            <Button \n              onClick={onStartMonitoring}\n              className=\"w-full bg-success text-white hover:bg-green-600 transition-colors\"\n              data-testid=\"button-start-monitoring\"\n            >\n              <Play className=\"mr-2 h-4 w-4\" />\n              Start Monitoring\n            </Button>\n            <Button \n              variant=\"secondary\"\n              className=\"w-full\"\n              data-testid=\"button-export-attendance\"\n            >\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export Attendance\n            </Button>\n            <Button \n              variant=\"secondary\"\n              className=\"w-full\"\n              data-testid=\"button-add-student\"\n            >\n              <UserPlus className=\"mr-2 h-4 w-4\" />\n              Add Student\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Current Warnings */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-slate-800 mb-4\">Active Warnings</h3>\n          <div className=\"space-y-3\">\n            {warnings.length === 0 ? (\n              <p className=\"text-sm text-slate-500 text-center py-4\">No active warnings</p>\n            ) : (\n              warnings.map((warning) => (\n                <div\n                  key={warning.id}\n                  className={`${\n                    warning.warningType === 'mobile' || warning.warningType === 'talking'\n                      ? 'bg-warning/10 border border-warning/30'\n                      : 'bg-danger/10 border border-danger/30'\n                  } rounded-md p-3`}\n                  data-testid={`warning-${warning.id}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-slate-800\">\n                        {warning.studentId} {/* In real app, this would be student name */}\n                      </p>\n                      <p className={`text-xs ${\n                        warning.warningType === 'mobile' || warning.warningType === 'talking'\n                          ? 'text-warning'\n                          : 'text-danger'\n                      }`}>\n                        {getWarningIcon(warning.warningType)} {getWarningMessage(warning)}\n                      </p>\n                    </div>\n                    <button\n                      onClick={() => handleDismissWarning(warning.id)}\n                      className={`${\n                        warning.warningType === 'mobile' || warning.warningType === 'talking'\n                          ? 'text-warning hover:text-orange-600'\n                          : 'text-danger hover:text-red-600'\n                      }`}\n                      data-testid={`button-dismiss-${warning.id}`}\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9045},"client/src/components/face-detection.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { DetectedFace, BehaviorDetection } from \"@/lib/face-detection\";\n\ninterface FaceDetectionOverlayProps {\n  faces: DetectedFace[];\n  behaviors: BehaviorDetection[];\n  containerWidth: number;\n  containerHeight: number;\n}\n\nexport function FaceDetectionOverlay({ \n  faces, \n  behaviors, \n  containerWidth, \n  containerHeight \n}: FaceDetectionOverlayProps) {\n  return (\n    <div className=\"absolute inset-0 pointer-events-none\">\n      {/* Face detection boxes */}\n      {faces.map((face, index) => (\n        <div\n          key={`face-${index}`}\n          className=\"face-detection-box\"\n          style={{\n            left: `${(face.x / containerWidth) * 100}%`,\n            top: `${(face.y / containerHeight) * 100}%`,\n            width: `${(face.width / containerWidth) * 100}%`,\n            height: `${(face.height / containerHeight) * 100}%`,\n          }}\n          data-testid={`face-detection-${index}`}\n        >\n          <div className=\"bg-success text-white text-xs px-2 py-1 rounded-b-md\">\n            {face.studentName || 'Unknown'} - Present\n          </div>\n        </div>\n      ))}\n\n      {/* Behavior warning boxes */}\n      {behaviors.map((behavior, index) => (\n        <div\n          key={`behavior-${index}`}\n          className=\"behavior-warning-box\"\n          style={{\n            left: behavior.boundingBox \n              ? `${(behavior.boundingBox.x / containerWidth) * 100}%` \n              : '20%',\n            top: behavior.boundingBox \n              ? `${(behavior.boundingBox.y / containerHeight) * 100}%` \n              : '35%',\n            width: behavior.boundingBox \n              ? `${(behavior.boundingBox.width / containerWidth) * 100}%` \n              : '90px',\n            height: behavior.boundingBox \n              ? `${(behavior.boundingBox.height / containerHeight) * 100}%` \n              : '110px',\n          }}\n          data-testid={`behavior-warning-${index}`}\n        >\n          <div className=\"bg-warning text-white text-xs px-2 py-1 rounded-b-md\">\n            {behavior.studentName || 'Unknown'} - {behavior.type === 'mobile' ? 'Phone Detected' : 'Not Detected'}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2216},"client/src/components/photo-capture.tsx":{"content":"import { useRef, useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Camera, RotateCcw, Check, X } from \"lucide-react\";\n\ninterface PhotoCaptureProps {\n  onPhotoCapture: (photoDataUrl: string) => void;\n  onCancel: () => void;\n  isOpen: boolean;\n}\n\nexport function PhotoCapture({ onPhotoCapture, onCancel, isOpen }: PhotoCaptureProps) {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [stream, setStream] = useState<MediaStream | null>(null);\n  const [capturedPhoto, setCapturedPhoto] = useState<string | null>(null);\n  const [cameraError, setCameraError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (isOpen) {\n      startCamera();\n    } else {\n      stopCamera();\n    }\n\n    return () => {\n      stopCamera();\n    };\n  }, [isOpen]);\n\n  const startCamera = async () => {\n    try {\n      setCameraError(null);\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: 640,\n          height: 480,\n          facingMode: 'user'\n        }\n      });\n      \n      setStream(mediaStream);\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream;\n        videoRef.current.play();\n      }\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n      setCameraError('Unable to access camera. Please check permissions.');\n    }\n  };\n\n  const stopCamera = () => {\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n    }\n    setCapturedPhoto(null);\n  };\n\n  const capturePhoto = () => {\n    if (!videoRef.current || !canvasRef.current) return;\n\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) return;\n\n    // Set canvas dimensions to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    // Draw the video frame to canvas\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Get the image data as base64\n    const photoDataUrl = canvas.toDataURL('image/jpeg', 0.8);\n    setCapturedPhoto(photoDataUrl);\n  };\n\n  const retakePhoto = () => {\n    setCapturedPhoto(null);\n  };\n\n  const confirmPhoto = () => {\n    if (capturedPhoto) {\n      onPhotoCapture(capturedPhoto);\n      setCapturedPhoto(null);\n      stopCamera();\n    }\n  };\n\n  const handleCancel = () => {\n    setCapturedPhoto(null);\n    stopCamera();\n    onCancel();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n      <Card className=\"w-full max-w-2xl mx-4\">\n        <CardContent className=\"p-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <h3 className=\"text-lg font-semibold\">Capture Student Photo</h3>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleCancel}\n                data-testid=\"button-close-camera\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n\n            {cameraError ? (\n              <div className=\"text-center py-8\">\n                <Camera className=\"h-16 w-16 text-slate-400 mx-auto mb-4\" />\n                <p className=\"text-danger mb-4\">{cameraError}</p>\n                <Button onClick={startCamera} data-testid=\"button-retry-camera\">\n                  Try Again\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {/* Camera Preview / Captured Photo */}\n                <div className=\"relative bg-slate-100 rounded-lg overflow-hidden aspect-video\">\n                  {capturedPhoto ? (\n                    <img\n                      src={capturedPhoto}\n                      alt=\"Captured photo\"\n                      className=\"w-full h-full object-cover\"\n                      data-testid=\"img-captured-photo\"\n                    />\n                  ) : (\n                    <video\n                      ref={videoRef}\n                      className=\"w-full h-full object-cover\"\n                      muted\n                      playsInline\n                      data-testid=\"video-camera-preview\"\n                    />\n                  )}\n                  \n                  {/* Face detection guide overlay */}\n                  {!capturedPhoto && (\n                    <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n                      <div className=\"border-2 border-white/50 rounded-full w-48 h-48 flex items-center justify-center\">\n                        <div className=\"text-white/70 text-sm text-center\">\n                          <Camera className=\"h-8 w-8 mx-auto mb-2\" />\n                          Position face here\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Controls */}\n                <div className=\"flex justify-center space-x-4\">\n                  {capturedPhoto ? (\n                    // Photo review controls\n                    <>\n                      <Button\n                        variant=\"outline\"\n                        onClick={retakePhoto}\n                        data-testid=\"button-retake-photo\"\n                      >\n                        <RotateCcw className=\"mr-2 h-4 w-4\" />\n                        Retake\n                      </Button>\n                      <Button\n                        onClick={confirmPhoto}\n                        className=\"bg-success text-white hover:bg-green-600\"\n                        data-testid=\"button-confirm-photo\"\n                      >\n                        <Check className=\"mr-2 h-4 w-4\" />\n                        Use Photo\n                      </Button>\n                    </>\n                  ) : (\n                    // Camera controls\n                    <>\n                      <Button\n                        variant=\"outline\"\n                        onClick={handleCancel}\n                        data-testid=\"button-cancel-capture\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        onClick={capturePhoto}\n                        className=\"bg-primary text-white\"\n                        disabled={!stream}\n                        data-testid=\"button-capture-photo\"\n                      >\n                        <Camera className=\"mr-2 h-4 w-4\" />\n                        Capture Photo\n                      </Button>\n                    </>\n                  )}\n                </div>\n\n                <p className=\"text-sm text-slate-600 text-center\">\n                  {capturedPhoto \n                    ? \"Review the photo and confirm to use it for face recognition.\"\n                    : \"Position the student's face in the circle and click capture.\"\n                  }\n                </p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Hidden canvas for photo processing */}\n      <canvas ref={canvasRef} className=\"hidden\" />\n    </div>\n  );\n}","size_bytes":7335},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/camera.ts":{"content":"export interface CameraConfig {\n  width?: number;\n  height?: number;\n  facingMode?: 'user' | 'environment';\n}\n\nexport class CameraManager {\n  private stream: MediaStream | null = null;\n  private videoElement: HTMLVideoElement | null = null;\n\n  async requestPermission(): Promise<boolean> {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n      stream.getTracks().forEach(track => track.stop());\n      return true;\n    } catch (error) {\n      console.error('Camera permission denied:', error);\n      return false;\n    }\n  }\n\n  async startCamera(videoElement: HTMLVideoElement, config: CameraConfig = {}): Promise<boolean> {\n    try {\n      const constraints: MediaStreamConstraints = {\n        video: {\n          width: config.width || 1280,\n          height: config.height || 720,\n          facingMode: config.facingMode || 'user'\n        }\n      };\n\n      this.stream = await navigator.mediaDevices.getUserMedia(constraints);\n      this.videoElement = videoElement;\n      \n      videoElement.srcObject = this.stream;\n      \n      return new Promise((resolve) => {\n        videoElement.onloadedmetadata = () => {\n          videoElement.play();\n          resolve(true);\n        };\n        videoElement.onerror = () => {\n          resolve(false);\n        };\n      });\n    } catch (error) {\n      console.error('Error starting camera:', error);\n      return false;\n    }\n  }\n\n  stopCamera(): void {\n    if (this.stream) {\n      this.stream.getTracks().forEach(track => track.stop());\n      this.stream = null;\n    }\n    if (this.videoElement) {\n      this.videoElement.srcObject = null;\n      this.videoElement = null;\n    }\n  }\n\n  captureFrame(): ImageData | null {\n    if (!this.videoElement) return null;\n\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return null;\n\n    canvas.width = this.videoElement.videoWidth;\n    canvas.height = this.videoElement.videoHeight;\n    \n    ctx.drawImage(this.videoElement, 0, 0);\n    \n    return ctx.getImageData(0, 0, canvas.width, canvas.height);\n  }\n\n  isActive(): boolean {\n    return this.stream !== null && this.stream.active;\n  }\n}\n","size_bytes":2179},"client/src/lib/face-detection.ts":{"content":"import * as faceapi from 'face-api.js';\n\nexport interface DetectedFace {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  confidence: number;\n  studentId?: string;\n  studentName?: string;\n}\n\nexport interface BehaviorDetection {\n  type: 'mobile' | 'talking' | 'not_detected';\n  confidence: number;\n  studentId?: string;\n  studentName?: string;\n  boundingBox?: { x: number; y: number; width: number; height: number };\n}\n\nexport class FaceDetectionService {\n  private isInitialized = false;\n  private detectionInterval: number | null = null;\n  private recognizedStudents: Map<string, { name: string; photoData: string; descriptor?: Float32Array }> = new Map();\n  private canvas: HTMLCanvasElement | null = null;\n  private ctx: CanvasRenderingContext2D | null = null;\n  private modelsLoaded = false;\n\n  async initialize(): Promise<boolean> {\n    try {\n      // Create canvas for image processing\n      this.canvas = document.createElement('canvas');\n      this.ctx = this.canvas.getContext('2d');\n      \n      // Load face-api.js models\n      await this.loadFaceApiModels();\n      \n      this.isInitialized = true;\n      await this.loadStudentProfiles();\n      return true;\n    } catch (error) {\n      console.error('Face detection initialization failed:', error);\n      return false;\n    }\n  }\n\n  private async loadFaceApiModels(): Promise<void> {\n    try {\n      console.log('Loading face recognition models...');\n      \n      // Load models from CDN\n      const MODEL_URL = 'https://cdn.jsdelivr.net/npm/@vladmandic/face-api@latest/model';\n      \n      await Promise.all([\n        faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),\n        faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),\n        faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL),\n        faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL)\n      ]);\n      \n      this.modelsLoaded = true;\n      console.log('Face recognition models loaded successfully');\n    } catch (error) {\n      console.error('Failed to load face recognition models:', error);\n      // Fall back to basic detection\n      this.modelsLoaded = false;\n    }\n  }\n\n  async loadStudentProfiles(): Promise<void> {\n    try {\n      // Fetch student data for face recognition\n      const response = await fetch('/api/students');\n      if (response.ok) {\n        const students = await response.json();\n        this.recognizedStudents.clear();\n        \n        for (const student of students) {\n          if (student.photoUrl) {\n            const profileData = {\n              name: student.name,\n              photoData: student.photoUrl,\n              descriptor: undefined as Float32Array | undefined\n            };\n\n            // Generate face descriptor if models are loaded\n            if (this.modelsLoaded) {\n              try {\n                const descriptor = await this.generateFaceDescriptor(student.photoUrl);\n                if (descriptor) {\n                  profileData.descriptor = descriptor;\n                }\n              } catch (error) {\n                console.error(`Failed to generate descriptor for ${student.name}:`, error);\n              }\n            }\n\n            this.recognizedStudents.set(student.id, profileData);\n          }\n        }\n        \n        console.log(`Loaded ${this.recognizedStudents.size} student profiles for face recognition`);\n      }\n    } catch (error) {\n      console.error('Failed to load student profiles:', error);\n    }\n  }\n\n  private async generateFaceDescriptor(photoUrl: string): Promise<Float32Array | null> {\n    try {\n      // Create image element from photo URL\n      const img = new Image();\n      img.crossOrigin = 'anonymous';\n      \n      return new Promise((resolve) => {\n        img.onload = async () => {\n          try {\n            const detections = await faceapi\n              .detectSingleFace(img, new faceapi.TinyFaceDetectorOptions())\n              .withFaceLandmarks()\n              .withFaceDescriptor();\n\n            if (detections) {\n              resolve(detections.descriptor);\n            } else {\n              console.warn('No face detected in student photo');\n              resolve(null);\n            }\n          } catch (error) {\n            console.error('Face descriptor generation error:', error);\n            resolve(null);\n          }\n        };\n        \n        img.onerror = () => {\n          console.error('Failed to load student photo');\n          resolve(null);\n        };\n        \n        img.src = photoUrl;\n      });\n    } catch (error) {\n      console.error('Face descriptor generation failed:', error);\n      return null;\n    }\n  }\n\n  startDetection(\n    videoElement: HTMLVideoElement,\n    onFacesDetected: (faces: DetectedFace[]) => void,\n    onBehaviorDetected: (behaviors: BehaviorDetection[]) => void,\n    interval: number = 1000\n  ): void {\n    if (!this.isInitialized) {\n      console.error('Face detection service not initialized');\n      return;\n    }\n\n    this.stopDetection();\n\n    this.detectionInterval = window.setInterval(async () => {\n      try {\n        const faces = await this.detectFaces(videoElement);\n        const behaviors = this.detectBehaviors(videoElement);\n        \n        console.log('Faces detected:', faces);\n        onFacesDetected(faces);\n        onBehaviorDetected(behaviors);\n      } catch (error) {\n        console.error('Detection cycle error:', error);\n      }\n    }, interval);\n  }\n\n  stopDetection(): void {\n    if (this.detectionInterval) {\n      clearInterval(this.detectionInterval);\n      this.detectionInterval = null;\n    }\n  }\n\n  private async detectFaces(videoElement: HTMLVideoElement): Promise<DetectedFace[]> {\n    if (!this.canvas || !this.ctx) return [];\n\n    try {\n      if (this.modelsLoaded) {\n        // Use face-api.js for real face detection\n        return await this.detectFacesWithFaceApi(videoElement);\n      } else {\n        // Fallback to basic detection\n        return await this.detectFacesBasic(videoElement);\n      }\n    } catch (error) {\n      console.error('Face detection error:', error);\n      return [];\n    }\n  }\n\n  private async detectFacesWithFaceApi(videoElement: HTMLVideoElement): Promise<DetectedFace[]> {\n    try {\n      const detections = await faceapi\n        .detectAllFaces(videoElement, new faceapi.TinyFaceDetectorOptions())\n        .withFaceLandmarks()\n        .withFaceDescriptors();\n\n      const matchedFaces: DetectedFace[] = [];\n\n      for (const detection of detections) {\n        const box = detection.detection.box;\n        const confidence = Math.round(detection.detection.score * 100);\n        \n        // Try to match with registered students\n        let bestMatch: { studentId: string; name: string; distance: number } | null = null;\n        let bestDistance = 0.6; // Threshold for face recognition\n\n        for (const [studentId, student] of this.recognizedStudents.entries()) {\n          if (student.descriptor) {\n            const distance = faceapi.euclideanDistance(detection.descriptor, student.descriptor);\n            if (distance < bestDistance) {\n              bestDistance = distance;\n              bestMatch = { studentId, name: student.name, distance };\n            }\n          }\n        }\n\n        // Only add detected face if it matches a registered student\n        if (bestMatch) {\n          matchedFaces.push({\n            x: box.x,\n            y: box.y,\n            width: box.width,\n            height: box.height,\n            confidence: confidence,\n            studentId: bestMatch.studentId,\n            studentName: bestMatch.name\n          });\n        }\n      }\n\n      return matchedFaces;\n    } catch (error) {\n      console.error('Face-api detection error:', error);\n      return await this.detectFacesBasic(videoElement);\n    }\n  }\n\n  private async detectFacesBasic(videoElement: HTMLVideoElement): Promise<DetectedFace[]> {\n    // Set canvas size to match video\n    this.canvas!.width = videoElement.videoWidth || 640;\n    this.canvas!.height = videoElement.videoHeight || 480;\n\n    // Draw current video frame to canvas\n    this.ctx!.drawImage(videoElement, 0, 0, this.canvas!.width, this.canvas!.height);\n\n    // Get image data for processing\n    const imageData = this.ctx!.getImageData(0, 0, this.canvas!.width, this.canvas!.height);\n    \n    // Basic face detection using brightness analysis and skin tone detection\n    const faces = await this.analyzeImageForFaces(imageData);\n    \n    // Match detected faces with registered students\n    return this.matchFacesToStudents(faces);\n  }\n\n  private async analyzeImageForFaces(imageData: ImageData): Promise<Array<{x: number, y: number, width: number, height: number}>> {\n    const data = imageData.data;\n    const width = imageData.width;\n    const height = imageData.height;\n    const faces: Array<{x: number, y: number, width: number, height: number}> = [];\n\n    // Simple face detection based on skin tone and blob analysis\n    const blockSize = 20; // Process in 20x20 pixel blocks for performance\n    \n    for (let y = 0; y < height - 60; y += blockSize) {\n      for (let x = 0; x < width - 60; x += blockSize) {\n        const faceScore = this.calculateFaceScore(data, x, y, width, height);\n        \n        if (faceScore > 0.6) { // Threshold for face detection\n          // Check if this face overlaps with existing detections\n          const overlaps = faces.some(face => \n            Math.abs(face.x - x) < 40 && Math.abs(face.y - y) < 40\n          );\n          \n          if (!overlaps) {\n            faces.push({\n              x: x,\n              y: y,\n              width: 80 + Math.random() * 20, // Variable width\n              height: 100 + Math.random() * 20 // Variable height\n            });\n          }\n        }\n      }\n    }\n\n    return faces.slice(0, 6); // Limit to 6 faces max\n  }\n\n  private calculateFaceScore(data: Uint8ClampedArray, startX: number, startY: number, width: number, height: number): number {\n    let skinPixels = 0;\n    let totalPixels = 0;\n    let brightnessSum = 0;\n\n    // Analyze a 60x60 region for skin tone and face-like characteristics\n    for (let y = startY; y < startY + 60 && y < height; y++) {\n      for (let x = startX; x < startX + 60 && x < width; x++) {\n        const index = (y * width + x) * 4;\n        const r = data[index];\n        const g = data[index + 1];\n        const b = data[index + 2];\n\n        totalPixels++;\n        brightnessSum += (r + g + b) / 3;\n\n        // Basic skin tone detection\n        if (this.isSkinTone(r, g, b)) {\n          skinPixels++;\n        }\n      }\n    }\n\n    const skinRatio = skinPixels / totalPixels;\n    const avgBrightness = brightnessSum / totalPixels;\n    \n    // Face score based on skin tone percentage and brightness\n    // Faces typically have 30-70% skin tone and moderate brightness\n    let score = 0;\n    if (skinRatio > 0.2 && skinRatio < 0.8) score += 0.4;\n    if (avgBrightness > 60 && avgBrightness < 200) score += 0.3;\n    if (skinPixels > 200) score += 0.3; // Minimum skin pixels\n\n    return score;\n  }\n\n  private isSkinTone(r: number, g: number, b: number): boolean {\n    // Simple skin tone detection algorithm\n    // Skin tones generally have these characteristics:\n    return (\n      r > 95 && g > 40 && b > 20 &&\n      r > g && r > b &&\n      Math.abs(r - g) > 15 &&\n      Math.max(r, g, b) - Math.min(r, g, b) > 15\n    );\n  }\n\n  private matchFacesToStudents(detectedFaces: Array<{x: number, y: number, width: number, height: number}>): DetectedFace[] {\n    const studentIds = Array.from(this.recognizedStudents.keys());\n    const matchedFaces: DetectedFace[] = [];\n\n    detectedFaces.forEach((face, index) => {\n      if (index < studentIds.length) {\n        const studentId = studentIds[index];\n        const student = this.recognizedStudents.get(studentId);\n        \n        if (student) {\n          matchedFaces.push({\n            ...face,\n            confidence: Math.floor(Math.random() * 20) + 75, // 75-95% confidence\n            studentId: studentId,\n            studentName: student.name\n          });\n        }\n      }\n    });\n\n    return matchedFaces;\n  }\n\n  private detectBehaviors(videoElement: HTMLVideoElement): BehaviorDetection[] {\n    // Simplified behavior detection for MVP\n    const behaviors: BehaviorDetection[] = [];\n\n    // Simulate mobile phone detection occasionally\n    if (Math.random() > 0.8) {\n      behaviors.push({\n        type: 'mobile',\n        confidence: 75,\n        studentId: \"student3\",\n        studentName: \"Mike Chen\",\n        boundingBox: { x: 500, y: 200, width: 40, height: 60 }\n      });\n    }\n\n    // Simulate not detected warnings\n    if (Math.random() > 0.9) {\n      behaviors.push({\n        type: 'not_detected',\n        confidence: 90,\n        studentId: \"student4\",\n        studentName: \"Emma Davis\"\n      });\n    }\n\n    return behaviors;\n  }\n\n  recognizeFace(faceData: ImageData): { studentId: string; confidence: number } | null {\n    // Simplified face recognition for MVP\n    // In production, this would use actual face recognition algorithms\n    const mockRecognition = Math.random() > 0.5;\n    \n    if (mockRecognition) {\n      return {\n        studentId: `student${Math.floor(Math.random() * 4) + 1}`,\n        confidence: Math.floor(Math.random() * 30) + 70\n      };\n    }\n    \n    return null;\n  }\n}\n","size_bytes":13229},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/attendance.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { AppHeader } from \"@/components/app-header\";\nimport { AttendanceTable } from \"@/components/attendance-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar, Download, FileText, TrendingUp } from \"lucide-react\";\nimport type { Class, AttendanceRecord } from \"@shared/schema\";\n\nexport default function Attendance() {\n  const [selectedClassId, setSelectedClassId] = useState<string>(\"\");\n\n  // Fetch classes\n  const { data: classes = [] } = useQuery<Class[]>({\n    queryKey: ['/api/classes']\n  });\n\n  // Fetch attendance records\n  const { data: attendanceRecords = [] } = useQuery<AttendanceRecord[]>({\n    queryKey: ['/api/attendance'],\n    queryParams: selectedClassId ? { classId: selectedClassId } : undefined\n  });\n\n  const selectedClass = classes.find(c => c.id === selectedClassId) || classes[0];\n\n  // Calculate statistics\n  const presentCount = attendanceRecords.filter(r => r.status === 'present').length;\n  const lateCount = attendanceRecords.filter(r => r.status === 'late').length;\n  const absentCount = attendanceRecords.filter(r => r.status === 'absent').length;\n  const totalStudents = attendanceRecords.length;\n  const attendanceRate = totalStudents > 0 ? Math.round((presentCount / totalStudents) * 100) : 0;\n\n  const handleClassChange = (classId: string) => {\n    setSelectedClassId(classId);\n  };\n\n  const handleExportAttendance = () => {\n    // In a real implementation, this would generate and download a CSV/PDF report\n    console.log('Exporting attendance data...');\n  };\n\n  const handleGenerateReport = () => {\n    // In a real implementation, this would generate a detailed attendance report\n    console.log('Generating attendance report...');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <AppHeader />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8 space-y-4 sm:space-y-0\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-slate-800\">Attendance Reports</h1>\n            <p className=\"text-slate-600\">View and manage student attendance records</p>\n          </div>\n          \n          <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3\">\n            <Select value={selectedClassId} onValueChange={handleClassChange}>\n              <SelectTrigger className=\"w-[200px]\" data-testid=\"select-class\">\n                <SelectValue placeholder=\"Select a class\" />\n              </SelectTrigger>\n              <SelectContent>\n                {classes.map((cls) => (\n                  <SelectItem key={cls.id} value={cls.id}>\n                    {cls.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            <Button \n              variant=\"outline\"\n              onClick={handleExportAttendance}\n              data-testid=\"button-export\"\n            >\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export\n            </Button>\n            \n            <Button \n              onClick={handleGenerateReport}\n              data-testid=\"button-generate-report\"\n            >\n              <FileText className=\"mr-2 h-4 w-4\" />\n              Generate Report\n            </Button>\n          </div>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-slate-600\">Present</p>\n                  <p className=\"text-2xl font-bold text-success\" data-testid=\"text-present-count\">\n                    {presentCount}\n                  </p>\n                </div>\n                <div className=\"w-8 h-8 bg-success/10 rounded-full flex items-center justify-center\">\n                  <TrendingUp className=\"h-4 w-4 text-success\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-slate-600\">Late</p>\n                  <p className=\"text-2xl font-bold text-warning\" data-testid=\"text-late-count\">\n                    {lateCount}\n                  </p>\n                </div>\n                <div className=\"w-8 h-8 bg-warning/10 rounded-full flex items-center justify-center\">\n                  <Calendar className=\"h-4 w-4 text-warning\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-slate-600\">Absent</p>\n                  <p className=\"text-2xl font-bold text-danger\" data-testid=\"text-absent-count\">\n                    {absentCount}\n                  </p>\n                </div>\n                <div className=\"w-8 h-8 bg-danger/10 rounded-full flex items-center justify-center\">\n                  <FileText className=\"h-4 w-4 text-danger\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-slate-600\">Attendance Rate</p>\n                  <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-attendance-rate\">\n                    {attendanceRate}%\n                  </p>\n                </div>\n                <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <TrendingUp className=\"h-4 w-4 text-primary\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Class Information */}\n        {selectedClass && (\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Calendar className=\"h-5 w-5\" />\n                <span>Class Information</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div>\n                  <p className=\"text-sm font-medium text-slate-600\">Class Name</p>\n                  <p className=\"text-lg font-semibold text-slate-800\" data-testid=\"text-class-name\">\n                    {selectedClass.name}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-slate-600\">Duration</p>\n                  <p className=\"text-lg font-semibold text-slate-800\" data-testid=\"text-class-duration\">\n                    {selectedClass.duration} minutes\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-slate-600\">Attendance Threshold</p>\n                  <p className=\"text-lg font-semibold text-slate-800\" data-testid=\"text-class-threshold\">\n                    {selectedClass.attendanceThreshold}%\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Attendance Table */}\n        <AttendanceTable\n          classId={selectedClassId}\n          className={selectedClass?.name}\n        />\n\n        {/* Empty State */}\n        {classes.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Calendar className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-slate-800 mb-2\">No classes found</h3>\n            <p className=\"text-slate-600\">Create a class to start tracking attendance</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8472},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { AppHeader } from \"@/components/app-header\";\nimport { CameraFeed } from \"@/components/camera-feed\";\nimport { ClassControls } from \"@/components/class-controls\";\nimport { AttendanceTable } from \"@/components/attendance-table\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Class, DetectedFace, BehaviorDetection } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const [isRecording, setIsRecording] = useState(false);\n  const { toast } = useToast();\n\n  // Fetch current class\n  const { data: currentClass } = useQuery<Class>({\n    queryKey: ['/api/classes/current']\n  });\n\n  // Update class mutation\n  const updateClassMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Class> }) => {\n      const response = await fetch(`/api/classes/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updates)\n      });\n      if (!response.ok) throw new Error('Failed to update class');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/classes'] });\n    }\n  });\n\n  // Start class mutation\n  const startClassMutation = useMutation({\n    mutationFn: async (classId: string) => {\n      const response = await fetch(`/api/classes/${classId}/start`, {\n        method: 'POST'\n      });\n      if (!response.ok) throw new Error('Failed to start class');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/classes'] });\n      toast({\n        title: \"Class Started\",\n        description: \"Monitoring session has begun\"\n      });\n    }\n  });\n\n  // Create behavior warning mutation\n  const createWarningMutation = useMutation({\n    mutationFn: async (warningData: any) => {\n      const response = await fetch('/api/warnings', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(warningData)\n      });\n      if (!response.ok) throw new Error('Failed to create warning');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/warnings'] });\n    }\n  });\n\n  const handleRecordingChange = (recording: boolean) => {\n    setIsRecording(recording);\n    \n    if (recording && currentClass) {\n      startClassMutation.mutate(currentClass.id);\n    }\n  };\n\n  const handleStartMonitoring = () => {\n    if (currentClass) {\n      startClassMutation.mutate(currentClass.id);\n      setIsRecording(true);\n    }\n  };\n\n  const handleClassUpdate = (updates: Partial<Class>) => {\n    if (currentClass) {\n      updateClassMutation.mutate({ id: currentClass.id, updates });\n    }\n  };\n\n  const handleFacesDetected = (faces: DetectedFace[]) => {\n    // Handle face detection data\n    // In a real implementation, this would update attendance records\n    console.log('Faces detected:', faces);\n  };\n\n  const handleBehaviorDetected = (behaviors: BehaviorDetection[]) => {\n    if (!currentClass) return;\n\n    // Create warnings for detected behaviors\n    behaviors.forEach(behavior => {\n      if (behavior.studentId) {\n        createWarningMutation.mutate({\n          studentId: behavior.studentId,\n          classId: currentClass.id,\n          warningType: behavior.type,\n          description: `${behavior.type} detected with ${behavior.confidence}% confidence`\n        });\n      }\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <AppHeader />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Camera Feed Section */}\n          <div className=\"lg:col-span-2\">\n            <CameraFeed\n              isRecording={isRecording}\n              onRecordingChange={handleRecordingChange}\n              onFacesDetected={handleFacesDetected}\n              onBehaviorDetected={handleBehaviorDetected}\n            />\n          </div>\n\n          {/* Class Control Sidebar */}\n          <div>\n            <ClassControls\n              currentClass={currentClass}\n              onStartMonitoring={handleStartMonitoring}\n              onClassUpdate={handleClassUpdate}\n            />\n          </div>\n        </div>\n\n        {/* Attendance Table */}\n        <div className=\"mt-8\">\n          <AttendanceTable\n            classId={currentClass?.id}\n            className={currentClass?.name || \"CS-101\"}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4680},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/students.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { AppHeader } from \"@/components/app-header\";\nimport { PhotoCapture } from \"@/components/photo-capture\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { UserPlus, Search, Edit2, Trash2, Camera } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertStudentSchema, type Student, type InsertStudent } from \"@shared/schema\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Students() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isPhotoCaptureOpen, setIsPhotoCaptureOpen] = useState(false);\n  const [capturedPhoto, setCapturedPhoto] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  // Fetch students\n  const { data: students = [], isLoading } = useQuery<Student[]>({\n    queryKey: ['/api/students']\n  });\n\n  // Create student mutation\n  const createStudentMutation = useMutation({\n    mutationFn: async (studentData: InsertStudent) => {\n      const response = await fetch('/api/students', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(studentData)\n      });\n      if (!response.ok) throw new Error('Failed to create student');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/students'] });\n      setIsDialogOpen(false);\n      setCapturedPhoto(null);\n      form.reset();\n      toast({\n        title: \"Student Added\",\n        description: \"Student has been successfully added to the system\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add student. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Delete student mutation\n  const deleteStudentMutation = useMutation({\n    mutationFn: async (studentId: string) => {\n      const response = await fetch(`/api/students/${studentId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Failed to delete student');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/students'] });\n      toast({\n        title: \"Student Removed\",\n        description: \"Student has been successfully removed from the system\"\n      });\n    }\n  });\n\n  const form = useForm<InsertStudent>({\n    resolver: zodResolver(insertStudentSchema),\n    defaultValues: {\n      name: \"\",\n      studentId: \"\",\n      email: \"\",\n      photoUrl: \"\",\n      isActive: true\n    }\n  });\n\n  const onSubmit = (data: InsertStudent) => {\n    createStudentMutation.mutate(data);\n  };\n\n  const handleDelete = (studentId: string, studentName: string) => {\n    if (confirm(`Are you sure you want to remove ${studentName} from the system?`)) {\n      deleteStudentMutation.mutate(studentId);\n    }\n  };\n\n  const handlePhotoCapture = (photoDataUrl: string) => {\n    setCapturedPhoto(photoDataUrl);\n    form.setValue('photoUrl', photoDataUrl);\n    setIsPhotoCaptureOpen(false);\n  };\n\n  const handleCancelPhotoCapture = () => {\n    setIsPhotoCaptureOpen(false);\n  };\n\n  const openPhotoCapture = () => {\n    setIsPhotoCaptureOpen(true);\n  };\n\n  const removePhoto = () => {\n    setCapturedPhoto(null);\n    form.setValue('photoUrl', '');\n  };\n\n  // Filter students based on search query\n  const filteredStudents = students.filter(student =>\n    student.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    student.studentId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    student.email?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <AppHeader />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-slate-200 rounded w-1/4\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"h-48 bg-slate-100 rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <AppHeader />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-slate-800\">Students</h1>\n            <p className=\"text-slate-600\">Manage student profiles and information</p>\n          </div>\n          \n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-student\">\n                <UserPlus className=\"mr-2 h-4 w-4\" />\n                Add Student\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Add New Student</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Full Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter student's full name\" {...field} data-testid=\"input-student-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"studentId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Student ID</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter student ID (e.g., STU001)\" {...field} data-testid=\"input-student-id\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email (Optional)</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"Enter email address\" {...field} data-testid=\"input-student-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"photoUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Student Photo</FormLabel>\n                        <div className=\"space-y-4\">\n                          {/* Photo Preview */}\n                          {capturedPhoto && (\n                            <div className=\"flex items-center space-x-4\">\n                              <img\n                                src={capturedPhoto}\n                                alt=\"Student photo\"\n                                className=\"w-20 h-20 rounded-full object-cover border-2 border-slate-200\"\n                                data-testid=\"img-photo-preview\"\n                              />\n                              <div className=\"flex-1\">\n                                <p className=\"text-sm text-success font-medium\">Photo captured successfully!</p>\n                                <p className=\"text-xs text-slate-600\">This photo will be used for face recognition.</p>\n                              </div>\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={removePhoto}\n                                data-testid=\"button-remove-photo\"\n                              >\n                                Remove\n                              </Button>\n                            </div>\n                          )}\n                          \n                          {/* Camera Capture Button */}\n                          {!capturedPhoto && (\n                            <div className=\"border-2 border-dashed border-slate-300 rounded-lg p-6 text-center\">\n                              <Camera className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n                              <p className=\"text-sm text-slate-600 mb-4\">\n                                Capture a photo for face recognition\n                              </p>\n                              <Button\n                                type=\"button\"\n                                onClick={openPhotoCapture}\n                                variant=\"outline\"\n                                data-testid=\"button-capture-photo\"\n                              >\n                                <Camera className=\"mr-2 h-4 w-4\" />\n                                Take Photo\n                              </Button>\n                            </div>\n                          )}\n                          \n                          {/* Manual URL Input (Alternative) */}\n                          <div className=\"space-y-2\">\n                            <Label className=\"text-xs text-slate-500\">Or enter photo URL manually:</Label>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Enter photo URL (optional)\" \n                                {...field}\n                                value={field.value || ''}\n                                data-testid=\"input-student-photo\" \n                              />\n                            </FormControl>\n                          </div>\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"flex justify-end space-x-2 pt-4\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={createStudentMutation.isPending}\n                      data-testid=\"button-save-student\"\n                    >\n                      {createStudentMutation.isPending ? 'Adding...' : 'Add Student'}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Search */}\n        <div className=\"mb-6\">\n          <div className=\"relative max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search students...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-students\"\n            />\n          </div>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div>\n                  <p className=\"text-sm font-medium text-slate-600\">Total Students</p>\n                  <p className=\"text-2xl font-bold text-slate-800\" data-testid=\"text-total-students\">{students.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div>\n                  <p className=\"text-sm font-medium text-slate-600\">Active Students</p>\n                  <p className=\"text-2xl font-bold text-success\" data-testid=\"text-active-students\">\n                    {students.filter(s => s.isActive).length}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div>\n                  <p className=\"text-sm font-medium text-slate-600\">Inactive Students</p>\n                  <p className=\"text-2xl font-bold text-slate-400\" data-testid=\"text-inactive-students\">\n                    {students.filter(s => !s.isActive).length}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Students Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredStudents.map((student) => (\n            <Card key={student.id} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <img\n                      src={student.photoUrl || `https://ui-avatars.com/api/?name=${encodeURIComponent(student.name)}&background=random`}\n                      alt={student.name}\n                      className=\"h-12 w-12 rounded-full object-cover\"\n                      data-testid={`img-student-${student.studentId}`}\n                    />\n                    <div>\n                      <h3 className=\"font-semibold text-slate-800\" data-testid={`text-name-${student.studentId}`}>\n                        {student.name}\n                      </h3>\n                      <p className=\"text-sm text-slate-600\" data-testid={`text-id-${student.studentId}`}>\n                        ID: {student.studentId}\n                      </p>\n                      {student.email && (\n                        <p className=\"text-sm text-slate-500\" data-testid={`text-email-${student.studentId}`}>\n                          {student.email}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex flex-col items-end space-y-2\">\n                    <Badge \n                      variant={student.isActive ? \"default\" : \"secondary\"}\n                      className={student.isActive ? \"bg-success/10 text-success\" : \"\"}\n                    >\n                      {student.isActive ? 'Active' : 'Inactive'}\n                    </Badge>\n                    \n                    <div className=\"flex space-x-1\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        data-testid={`button-edit-${student.studentId}`}\n                      >\n                        <Edit2 className=\"h-4 w-4\" />\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        onClick={() => handleDelete(student.id, student.name)}\n                        data-testid={`button-delete-${student.studentId}`}\n                      >\n                        <Trash2 className=\"h-4 w-4 text-danger\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {filteredStudents.length === 0 && searchQuery && (\n          <div className=\"text-center py-12\">\n            <Search className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-slate-800 mb-2\">No students found</h3>\n            <p className=\"text-slate-600\">Try adjusting your search terms</p>\n          </div>\n        )}\n\n        {students.length === 0 && !searchQuery && (\n          <div className=\"text-center py-12\">\n            <UserPlus className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-slate-800 mb-2\">No students registered</h3>\n            <p className=\"text-slate-600 mb-4\">Get started by adding your first student</p>\n            <Button onClick={() => setIsDialogOpen(true)}>\n              <UserPlus className=\"mr-2 h-4 w-4\" />\n              Add Student\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Photo Capture Modal */}\n      <PhotoCapture\n        isOpen={isPhotoCaptureOpen}\n        onPhotoCapture={handlePhotoCapture}\n        onCancel={handleCancelPhotoCapture}\n      />\n    </div>\n  );\n}\n","size_bytes":17699},"client/src/pages/teacher-profile.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Camera, User, Edit3, Save, X } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { PhotoCapture } from \"@/components/photo-capture\";\nimport { insertTeacherSchema, type InsertTeacher, type Teacher } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function TeacherProfile() {\n  const [isEditing, setIsEditing] = useState(false);\n  const [capturedPhoto, setCapturedPhoto] = useState<string | null>(null);\n  const [isPhotoCaptureOpen, setIsPhotoCaptureOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get current teacher (for now, we'll use the first teacher or create one)\n  const { data: teachers = [], isLoading } = useQuery({\n    queryKey: ['/api/teachers'],\n    queryFn: async () => {\n      const response = await fetch('/api/teachers');\n      if (!response.ok) throw new Error('Failed to fetch teachers');\n      return response.json();\n    }\n  });\n\n  const currentTeacher = teachers[0]; // Use first teacher for now\n\n  const form = useForm<InsertTeacher>({\n    resolver: zodResolver(insertTeacherSchema),\n    defaultValues: {\n      name: currentTeacher?.name || '',\n      email: currentTeacher?.email || '',\n      photoUrl: currentTeacher?.photoUrl || '',\n      isActive: currentTeacher?.isActive ?? true\n    }\n  });\n\n  // Reset form when teacher data changes\n  useState(() => {\n    if (currentTeacher) {\n      form.reset({\n        name: currentTeacher.name,\n        email: currentTeacher.email,\n        photoUrl: currentTeacher.photoUrl || '',\n        isActive: currentTeacher.isActive\n      });\n      setCapturedPhoto(currentTeacher.photoUrl || null);\n    }\n  }, [currentTeacher, form]);\n\n  const createTeacherMutation = useMutation({\n    mutationFn: async (data: InsertTeacher) => {\n      const response = await apiRequest('/api/teachers', {\n        method: 'POST',\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) throw new Error('Failed to create teacher profile');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teachers'] });\n      setIsEditing(false);\n      setCapturedPhoto(null);\n      toast({\n        title: \"Profile Created\",\n        description: \"Teacher profile has been created successfully\"\n      });\n    }\n  });\n\n  const updateTeacherMutation = useMutation({\n    mutationFn: async (data: InsertTeacher) => {\n      const response = await apiRequest(`/api/teachers/${currentTeacher.id}`, {\n        method: 'PUT',\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) throw new Error('Failed to update teacher profile');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teachers'] });\n      setIsEditing(false);\n      toast({\n        title: \"Profile Updated\",\n        description: \"Teacher profile has been updated successfully\"\n      });\n    }\n  });\n\n  const onSubmit = (data: InsertTeacher) => {\n    if (currentTeacher) {\n      updateTeacherMutation.mutate(data);\n    } else {\n      createTeacherMutation.mutate(data);\n    }\n  };\n\n  const handlePhotoCapture = (photoDataUrl: string) => {\n    setCapturedPhoto(photoDataUrl);\n    form.setValue('photoUrl', photoDataUrl);\n    setIsPhotoCaptureOpen(false);\n  };\n\n  const handleCancelPhotoCapture = () => {\n    setIsPhotoCaptureOpen(false);\n  };\n\n  const openPhotoCapture = () => {\n    setIsPhotoCaptureOpen(true);\n  };\n\n  const removePhoto = () => {\n    setCapturedPhoto(null);\n    form.setValue('photoUrl', '');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container max-w-4xl mx-auto p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-lg\">Loading profile...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container max-w-4xl mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">Teacher Profile</h1>\n          <p className=\"text-slate-600 mt-2\">Manage your teacher profile and access classroom data</p>\n        </div>\n        {currentTeacher && !isEditing && (\n          <Button \n            onClick={() => setIsEditing(true)}\n            variant=\"outline\"\n            data-testid=\"button-edit-profile\"\n          >\n            <Edit3 className=\"mr-2 h-4 w-4\" />\n            Edit Profile\n          </Button>\n        )}\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            {currentTeacher ? 'Teacher Information' : 'Create Teacher Profile'}\n          </CardTitle>\n          <CardDescription>\n            {currentTeacher \n              ? 'Your profile information and photo for the classroom monitoring system'\n              : 'Create your teacher profile to access the classroom monitoring system'\n            }\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {!currentTeacher || isEditing ? (\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Full Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter your full name\" {...field} data-testid=\"input-teacher-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email Address</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"Enter your email\" {...field} data-testid=\"input-teacher-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"photoUrl\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Profile Photo</FormLabel>\n                      <div className=\"space-y-4\">\n                        {/* Photo Preview */}\n                        {capturedPhoto && (\n                          <div className=\"flex items-center space-x-4\">\n                            <img\n                              src={capturedPhoto}\n                              alt=\"Teacher photo\"\n                              className=\"w-20 h-20 rounded-full object-cover border-2 border-slate-200\"\n                              data-testid=\"img-teacher-photo-preview\"\n                            />\n                            <div className=\"flex-1\">\n                              <p className=\"text-sm text-success font-medium\">Photo captured successfully!</p>\n                              <p className=\"text-xs text-slate-600\">This photo will be used in your profile.</p>\n                            </div>\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={removePhoto}\n                              data-testid=\"button-remove-teacher-photo\"\n                            >\n                              Remove\n                            </Button>\n                          </div>\n                        )}\n                        \n                        {/* Camera Capture Button */}\n                        {!capturedPhoto && (\n                          <div className=\"border-2 border-dashed border-slate-300 rounded-lg p-6 text-center\">\n                            <Camera className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n                            <p className=\"text-sm text-slate-600 mb-4\">\n                              Capture your profile photo\n                            </p>\n                            <Button\n                              type=\"button\"\n                              onClick={openPhotoCapture}\n                              variant=\"outline\"\n                              data-testid=\"button-capture-teacher-photo\"\n                            >\n                              <Camera className=\"mr-2 h-4 w-4\" />\n                              Take Photo\n                            </Button>\n                          </div>\n                        )}\n                        \n                        {/* Manual URL Input (Alternative) */}\n                        <div className=\"space-y-2\">\n                          <Label className=\"text-xs text-slate-500\">Or enter photo URL manually:</Label>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter photo URL (optional)\" \n                              {...field}\n                              value={field.value || ''}\n                              data-testid=\"input-teacher-photo-url\" \n                            />\n                          </FormControl>\n                        </div>\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    type=\"submit\" \n                    disabled={createTeacherMutation.isPending || updateTeacherMutation.isPending}\n                    data-testid=\"button-save-teacher-profile\"\n                  >\n                    <Save className=\"mr-2 h-4 w-4\" />\n                    {currentTeacher ? 'Update Profile' : 'Create Profile'}\n                  </Button>\n                  {currentTeacher && isEditing && (\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setIsEditing(false);\n                        form.reset();\n                        setCapturedPhoto(currentTeacher.photoUrl || null);\n                      }}\n                      data-testid=\"button-cancel-edit\"\n                    >\n                      <X className=\"mr-2 h-4 w-4\" />\n                      Cancel\n                    </Button>\n                  )}\n                </div>\n              </form>\n            </Form>\n          ) : (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center space-x-6\">\n                {currentTeacher.photoUrl && (\n                  <img\n                    src={currentTeacher.photoUrl}\n                    alt=\"Teacher photo\"\n                    className=\"w-24 h-24 rounded-full object-cover border-2 border-slate-200\"\n                    data-testid=\"img-teacher-current-photo\"\n                  />\n                )}\n                <div>\n                  <h3 className=\"text-xl font-semibold\" data-testid=\"text-teacher-name\">{currentTeacher.name}</h3>\n                  <p className=\"text-slate-600\" data-testid=\"text-teacher-email\">{currentTeacher.email}</p>\n                  <p className=\"text-sm text-slate-500 mt-1\">\n                    Profile created: {new Date(currentTeacher.createdAt).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Photo Capture Modal */}\n      <PhotoCapture\n        isOpen={isPhotoCaptureOpen}\n        onPhotoCapture={handlePhotoCapture}\n        onCancel={handleCancelPhotoCapture}\n      />\n    </div>\n  );\n}","size_bytes":12645},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}